.row {
  //Max width suggests element to cover up that much amount if more is available else use 100% of the viewport width
  max-width: $grid-width;
  //Trick to use centre block element inside anothe block element (popular)
  //CSS will automatically calculate equal margin on both sides
  margin: 0 auto;
  //We could use :last-child psuedo-class as well.
  @include respond(tab-port) {
    max-width: 65rem;
    padding: 0 3rem;
  }
  &:not(:last-child) {
    margin-bottom: $gutter-vertical;
    @include respond(tab-port) {
      margin-bottom: $gutter-vertical-small;
    }
  }

  @include clearfix;
  //Using the attribute selector. This could have been done by adding an extra class as well.
  //The following expression means all the class name starting with col-
  //^ -> starting with;* -> containing;$ -> ending with
  [class^="col-"] {
    float: left;
    &:not(:last-child) {
      margin-right: $gutter-horizontal;
      @include respond(tab-port) {
        margin-right: 0;
        margin-bottom: $gutter-vertical-small;
      }
    }
    @include respond(tab-port) {
      width: 100% !important;
    }
  }

  .col-1-of-2 {
    width: calc((100% - #{$gutter-horizontal}) / 2);
  }
  .col-1-of-3 {
    width: calc((100% - 2*#{$gutter-horizontal}) / 3);
  }
  .col-1-of-4 {
    width: calc((100% - 3*#{$gutter-horizontal}) / 4);
  }
  .col-2-of-3 {
    width: calc(2 * ((100% - 2*#{$gutter-horizontal}) / 3) + #{$gutter-horizontal});
  }
  .col-2-of-4 {
    width: calc(2 * ((100% - 3*#{$gutter-horizontal}) / 4) + #{$gutter-horizontal});
  }
  .col-3-of-4 {
    width: calc(3 * ((100% - 3*#{$gutter-horizontal}) / 4) + 2*#{$gutter-horizontal});
  }
}
